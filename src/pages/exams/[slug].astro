---
import Layout from '../../layouts/Layout.astro';
import examData from '../../data/exams.json';

export async function getStaticPaths() {
  const exams = examData.exams;
  
  return exams.map((exam) => ({
    params: { slug: exam.slug },
    props: { exam },
  }));
}

interface ExamSession {
  session: string;
  date: string;
}

interface ExamData {
  id: string;
  name: string;
  fullName: string;
  sessions: ExamSession[];
  description: string;
  category: string;
  eligibility: string;
  subjects: string[];
  duration: string;
  conductingBody: string;
  seats: string;
  officialWebsite?: string;
  relatedExams: string[];
  slug: string;
  metaDescription: string;
  keywords: string[];
}

const { exam } = Astro.props as { exam: ExamData };
const allExams: ExamData[] = examData.exams;

// Get related exams data
const relatedExamsData = exam.relatedExams
  .map(slug => allExams.find(e => e.slug === slug))
  .filter(Boolean)
  .slice(0, 4);
---

<Layout title={`${exam.name} 2026 Countdown Timer | ${exam.fullName} Exam Date`} description={exam.metaDescription} keywords={exam.keywords} exam={exam}>
  <style>
    .countdown-number {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      transform-style: preserve-3d;
    }
    
    .countdown-number.flip {
      animation: flipAnimation 0.3s ease-in-out;
    }
    
    @keyframes flipAnimation {
      0% { transform: rotateX(0deg); }
      50% { transform: rotateX(-90deg); }
      100% { transform: rotateX(0deg); }
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease-in-out;
    }
    
    @keyframes fadeIn {
      0% { opacity: 0; transform: scale(0.95); }
      100% { opacity: 1; transform: scale(1); }
    }
    
    /* Responsive improvements */
    @media (max-width: 640px) {
      .countdown-display .grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
      }
      
      .countdown-number {
        font-size: 2.5rem !important;
        line-height: 1.1;
      }
    }
    
    @media (max-width: 480px) {
      .countdown-number {
        font-size: 2rem !important;
      }
      
      .countdown-label {
        font-size: 0.875rem !important;
      }
    }
    
    /* Fullscreen responsive */
    @media (max-width: 768px) {
      #fullscreen-countdown .grid {
        grid-template-columns: repeat(2, 1fr) !important;
        gap: 2rem !important;
      }
      
      #fullscreen-countdown .countdown-number {
        font-size: 4rem !important;
      }
    }
    
    @media (max-width: 480px) {
      #fullscreen-countdown .countdown-number {
        font-size: 3rem !important;
      }
      
      #fullscreen-countdown .countdown-label {
        font-size: 1rem !important;
      }
    }

    /* Fullscreen Modal transitions */
    #fullscreen-modal {
      transition: opacity 0.3s ease, visibility 0.3s ease;
    }
    #fullscreen-modal.hidden {
      opacity: 0;
      visibility: hidden;
    }
    #fullscreen-modal:not(.hidden) {
      opacity: 1;
      visibility: visible;
    }
  </style>
  <!-- Fullscreen Countdown Modal -->
  <div id="fullscreen-modal" class="fixed inset-0 bg-black z-50 hidden transition-opacity duration-300 opacity-0">
    <div class="h-full flex flex-col items-center justify-center p-8">
      <div class="text-center mb-8">
        <h1 class="font-serif italic text-4xl lg:text-6xl text-white mb-4">{exam.name}</h1>
        <p class="text-xl lg:text-2xl text-gray-300" id="fullscreen-session-info"></p>
      </div>
      
      <div id="fullscreen-countdown" class="mb-8">
        <!-- Countdown will be populated by JavaScript -->
      </div>
      
      <button 
        onclick="closeFullscreen()"
        class="fixed top-4 right-4 px-3 py-2 bg-black bg-opacity-50 text-white text-sm rounded-lg hover:bg-opacity-70 transition-all opacity-75 hover:opacity-100 flex items-center gap-2"
        title="Exit Fullscreen (ESC)"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
        ESC
      </button>
    </div>
  </div>

  <div class="min-h-screen bg-white">
    <!-- Header Navigation -->
    <nav class="border-b border-dashed border-zinc-300 bg-white sticky top-0 z-20">
      <div class="max-w-7xl mx-auto px-4 lg:px-8">
        <div class="flex items-center justify-between h-16">
          <div class="flex items-center gap-4">
            <a href="/" class="flex items-center gap-2 text-black hover:text-blue-600 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
              <span class="text-sm">All Exams</span>
            </a>
          </div>
          <div class="flex items-center gap-4">
            {exam.officialWebsite && (
              <a 
                href={exam.officialWebsite} 
                target="_blank" 
                rel="noopener noreferrer"
                class="px-3 py-1.5 text-sm text-blue-600 hover:text-blue-800 border border-blue-200 hover:border-blue-300 rounded-md transition-colors"
              >
                Official Site â†—
              </a>
            )}
            <span class="font-serif italic text-lg text-zinc-600">TimeKeeper</span>
          </div>
        </div>
      </div>
    </nav>

    <div class="max-w-5xl mx-auto px-4 lg:px-8 py-8">
      <!-- Exam Header -->
      <div class="text-center mb-8">
        <h1 class="font-serif italic text-3xl sm:text-4xl lg:text-6xl text-black mb-4">{exam.name}</h1>
        <p class="text-lg sm:text-xl lg:text-2xl text-zinc-600 mb-6">{exam.fullName}</p>
        
        <div class="flex items-center justify-center gap-2 sm:gap-3 flex-wrap mb-6">
          <span class={`inline-block px-3 sm:px-4 py-2 text-xs sm:text-sm border rounded-full ${
            exam.category === 'Engineering' ? 'bg-blue-50 text-blue-700 border-blue-200' :
            exam.category === 'Medical' ? 'bg-green-50 text-green-700 border-green-200' :
            exam.category === 'Management' ? 'bg-purple-50 text-purple-700 border-purple-200' :
            exam.category === 'Civil Services' ? 'bg-orange-50 text-orange-700 border-orange-200' :
            exam.category === 'Banking' ? 'bg-indigo-50 text-indigo-700 border-indigo-200' :
            exam.category === 'Defence' ? 'bg-red-50 text-red-700 border-red-200' :
            exam.category === 'Government Jobs' ? 'bg-yellow-50 text-yellow-700 border-yellow-200' :
            exam.category === 'Law' ? 'bg-gray-50 text-gray-700 border-gray-200' :
            exam.category === 'Teaching' ? 'bg-pink-50 text-pink-700 border-pink-200' :
            exam.category === 'Railway' ? 'bg-teal-50 text-teal-700 border-teal-200' :
            'bg-gray-50 text-gray-700 border-gray-200'
          }`}>
            {exam.category}
          </span>

          <span class="inline-block px-3 sm:px-4 py-2 text-xs sm:text-sm bg-zinc-100 text-zinc-700 rounded-full">
            {exam.conductingBody}
          </span>
        </div>

        <p class="text-base sm:text-lg text-zinc-700 leading-relaxed max-w-3xl mx-auto px-4">{exam.description}</p>
      </div>

      <!-- Session Toggle (if multiple sessions) -->
      {exam.sessions.length > 1 && (
        <div class="flex justify-center mb-8">
          <div class="bg-zinc-100 p-1 rounded-lg inline-flex flex-wrap gap-1">
            {exam.sessions.map((session, index) => (
              <button 
                onclick={`switchSession(${index})`}
                class={`session-toggle px-3 sm:px-4 py-2 text-xs sm:text-sm font-medium rounded-md transition-colors ${
                  index === 0 ? 'bg-white text-zinc-900 shadow-sm' : 'text-zinc-600 hover:text-zinc-900'
                }`}
                data-session={index}
              >
                {session.session}
              </button>
            ))}
          </div>
        </div>
      )}

      <!-- Large Countdown Display -->
      <div class="border border-dashed border-zinc-300 rounded-lg p-4 sm:p-8 lg:p-12 mb-8 relative">
          <div class="text-center">
          <div class="flex flex-col sm:flex-row sm:items-start justify-between mb-6 gap-4">
            <div class="flex-1 text-left">
              <h2 id="current-session-name" class="text-xl sm:text-2xl font-medium text-zinc-800 mb-2">
                {exam.sessions[0].session}
              </h2>
              <p id="current-session-date" class="text-base sm:text-lg text-zinc-600">
                {new Date(exam.sessions[0].date).toLocaleDateString('en-IN', { 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric',
                  weekday: 'long'
                })}
              </p>
            </div>
            <div class="flex gap-2 sm:self-start">
              <button 
                onclick="enterFullscreen()"
                class="px-3 sm:px-4 py-2 text-xs sm:text-sm text-zinc-600 hover:text-zinc-900 border border-dashed border-zinc-300 hover:border-zinc-400 rounded-md transition-all duration-200 flex items-center gap-2"
                title="Fullscreen Countdown"
              >
                <svg class="w-3 h-3 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4" />
                </svg>
                <span class="hidden sm:inline">Fullscreen</span>
                <span class="sm:hidden">Full</span>
              </button>
              <button 
                onclick="togglePiPWidget()"
                class="px-2 sm:px-3 py-2 text-xs sm:text-sm text-blue-600 hover:text-blue-800 bg-blue-50 hover:bg-blue-100 border border-dashed border-blue-200 hover:border-blue-300 rounded-md transition-all duration-200 flex items-center gap-1 sm:gap-2"
                title="Picture-in-Picture Countdown"
              >
                <svg class="w-3 h-3 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <rect x="2" y="3" width="20" height="14" rx="2" ry="2" stroke-width="2"/>
                  <rect x="8" y="8" width="8" height="6" rx="1" ry="1" stroke-width="2"/>
                </svg>
                <span class="text-xs font-medium">PiP</span>
              </button>
            </div>
          </div>
          
          <div id="main-countdown" class="countdown-display bg-zinc-50 p-4 sm:p-8 lg:p-12 rounded-lg">
            <!-- Countdown will be populated by JavaScript -->
          </div>
        </div>
      </div>

      <!-- Exam Details Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 mb-8">
        <!-- Basic Info -->
        <div class="border border-dashed border-zinc-300 p-4 sm:p-6 rounded-lg">
          <h3 class="font-serif italic text-lg sm:text-xl mb-4 text-zinc-800">Basic Information</h3>
          <div class="space-y-3 text-sm">
            <div class="flex justify-between">
              <span class="text-zinc-500">Duration:</span>
              <span class="text-zinc-800 font-medium">{exam.duration}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-zinc-500">Eligibility:</span>
              <span class="text-zinc-800 font-medium text-right max-w-32 sm:max-w-none">{exam.eligibility}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-zinc-500">Total Seats:</span>
              <span class="text-zinc-800 font-medium">{exam.seats}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-zinc-500">Sessions:</span>
              <span class="text-zinc-800 font-medium">{exam.sessions.length}</span>
            </div>
          </div>
        </div>

        <!-- Subjects -->
        <div class="border border-dashed border-zinc-300 p-4 sm:p-6 rounded-lg">
          <h3 class="font-serif italic text-lg sm:text-xl mb-4 text-zinc-800">Subjects</h3>
          <div class="flex flex-wrap gap-2">
            {exam.subjects.map((subject) => (
              <span class="inline-block px-2 sm:px-3 py-1 text-xs sm:text-sm bg-zinc-100 text-zinc-700 rounded-full">
                {subject}
              </span>
            ))}
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="border border-dashed border-zinc-300 p-4 sm:p-6 rounded-lg md:col-span-2 lg:col-span-1">
          <h3 class="font-serif italic text-lg sm:text-xl mb-4 text-zinc-800">Quick Links</h3>
          <div class="space-y-3">
            {exam.officialWebsite && (
              <a 
                href={exam.officialWebsite} 
                target="_blank" 
                rel="noopener noreferrer"
                class="block w-full px-4 py-2 text-sm text-blue-600 bg-blue-50 hover:bg-blue-100 border border-blue-200 rounded-md transition-colors text-center"
              >
                Official Website â†—
              </a>
            )}
            <button 
              onclick="shareExam()"
              class="block w-full px-4 py-2 text-sm text-zinc-600 bg-zinc-50 hover:bg-zinc-100 border border-zinc-200 rounded-md transition-colors"
            >
              Share This Exam
            </button>
          </div>
        </div>
      </div>

      <!-- Related Exams -->
      {relatedExamsData.length > 0 && (
        <div class="border border-dashed border-zinc-300 p-4 sm:p-6 rounded-lg mb-8">
          <h3 class="font-serif italic text-xl sm:text-2xl mb-6 text-zinc-800">Related Exams</h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            {relatedExamsData.map((relatedExam) => (
              <a 
                href={`/exams/${relatedExam.slug}`}
                class="block p-4 border border-dashed border-zinc-200 rounded-lg hover:border-zinc-400 transition-colors group"
              >
                <h4 class="font-medium text-sm sm:text-base text-zinc-800 group-hover:text-blue-600 mb-2">{relatedExam.name}</h4>
                <p class="text-xs text-zinc-500 mb-2">{relatedExam.category}</p>
                <div class="text-xs text-blue-600 group-hover:text-blue-800">View Details â†’</div>
              </a>
            ))}
          </div>
        </div>
      )}

      <!-- Important Notice -->
      <div class="border border-dashed border-amber-200 bg-amber-50/50 p-3 sm:p-4 rounded-lg">
        <div class="flex items-start gap-2">
          <svg class="w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4.5c-.77-.833-2.072-.833-2.842 0L4.982 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
          <div class="flex-1">
            <h3 class="text-sm font-medium text-amber-800 mb-1">Disclaimer</h3>
            <p class="text-xs text-amber-700/80 leading-relaxed">
              Please verify exam dates from {exam.conductingBody}'s official website. 
              This countdown is for reference only.
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ exam }}>
    let currentSessionIndex = 0;
    let countdownInterval;
    let fullscreenInterval;

    function formatTimeRemaining(targetDate) {
      const now = new Date().getTime();
      const target = new Date(targetDate).getTime();
      const distance = target - now;
      
      if (distance < 0) {
        return { expired: true, text: "Exam has passed" };
      }
      
      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);
      
      return {
        expired: false,
        days,
        hours,
        minutes,
        seconds
      };
    }

    function updateCountdown() {
      const currentSession = exam.sessions[currentSessionIndex];
      const timeRemaining = formatTimeRemaining(currentSession.date);
      const mainCountdown = document.getElementById('main-countdown');
      
      if (timeRemaining.expired) {
        mainCountdown.innerHTML = `<p class="text-xl sm:text-2xl font-medium text-red-600 fade-in">${timeRemaining.text}</p>`;
      } else {
        // Store previous values for animation comparison
        const prevValues = mainCountdown.dataset.prevValues ? JSON.parse(mainCountdown.dataset.prevValues) : {};
        const currentValues = { days: timeRemaining.days, hours: timeRemaining.hours, minutes: timeRemaining.minutes, seconds: timeRemaining.seconds };
        
        const shouldAnimate = {
          days: prevValues.days !== currentValues.days,
          hours: prevValues.hours !== currentValues.hours,
          minutes: prevValues.minutes !== currentValues.minutes,
          seconds: prevValues.seconds !== currentValues.seconds
        };
        
        mainCountdown.innerHTML = `
          <div class="countdown-display">
            <div class="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6">
              <div class="text-center">
                <div class="countdown-number text-3xl sm:text-5xl lg:text-7xl font-bold text-black mb-2 ${shouldAnimate.days ? 'flip' : ''}" data-value="${timeRemaining.days}">${timeRemaining.days}</div>
                <div class="countdown-label text-sm sm:text-lg text-zinc-500">Days</div>
              </div>
              <div class="text-center">
                <div class="countdown-number text-3xl sm:text-5xl lg:text-7xl font-bold text-black mb-2 ${shouldAnimate.hours ? 'flip' : ''}" data-value="${timeRemaining.hours}">${timeRemaining.hours}</div>
                <div class="countdown-label text-sm sm:text-lg text-zinc-500">Hours</div>
              </div>
              <div class="text-center">
                <div class="countdown-number text-3xl sm:text-5xl lg:text-7xl font-bold text-black mb-2 ${shouldAnimate.minutes ? 'flip' : ''}" data-value="${timeRemaining.minutes}">${timeRemaining.minutes}</div>
                <div class="countdown-label text-sm sm:text-lg text-zinc-500">Minutes</div>
              </div>
              <div class="text-center">
                <div class="countdown-number text-3xl sm:text-5xl lg:text-7xl font-bold text-black mb-2 ${shouldAnimate.seconds ? 'flip' : ''}" data-value="${timeRemaining.seconds}">${timeRemaining.seconds}</div>
                <div class="countdown-label text-sm sm:text-lg text-zinc-500">Seconds</div>
              </div>
            </div>
          </div>
        `;
        
        // Store current values for next comparison
        mainCountdown.dataset.prevValues = JSON.stringify(currentValues);
        
        // Remove animation classes after animation completes
        setTimeout(() => {
          document.querySelectorAll('.countdown-number.flip').forEach(el => {
            el.classList.remove('flip');
          });
        }, 300);
      }
    }

    function updateFullscreenCountdown() {
      const currentSession = exam.sessions[currentSessionIndex];
      const timeRemaining = formatTimeRemaining(currentSession.date);
      const fullscreenCountdown = document.getElementById('fullscreen-countdown');
      
      if (timeRemaining.expired) {
        fullscreenCountdown.innerHTML = `<p class="text-2xl sm:text-4xl font-medium text-red-400 fade-in">${timeRemaining.text}</p>`;
      } else {
        // Store previous values for animation comparison
        const prevValues = fullscreenCountdown.dataset.prevValues ? JSON.parse(fullscreenCountdown.dataset.prevValues) : {};
        const currentValues = { days: timeRemaining.days, hours: timeRemaining.hours, minutes: timeRemaining.minutes, seconds: timeRemaining.seconds };
        
        const shouldAnimate = {
          days: prevValues.days !== currentValues.days,
          hours: prevValues.hours !== currentValues.hours,
          minutes: prevValues.minutes !== currentValues.minutes,
          seconds: prevValues.seconds !== currentValues.seconds
        };
        
        fullscreenCountdown.innerHTML = `
          <div class="grid grid-cols-2 lg:grid-cols-4 gap-6 sm:gap-12">
            <div class="text-center">
              <div class="countdown-number text-6xl sm:text-8xl lg:text-9xl font-bold text-white mb-4 ${shouldAnimate.days ? 'flip' : ''}" data-value="${timeRemaining.days}">${timeRemaining.days}</div>
              <div class="countdown-label text-xl sm:text-2xl text-gray-300">Days</div>
            </div>
            <div class="text-center">
              <div class="countdown-number text-6xl sm:text-8xl lg:text-9xl font-bold text-white mb-4 ${shouldAnimate.hours ? 'flip' : ''}" data-value="${timeRemaining.hours}">${timeRemaining.hours}</div>
              <div class="countdown-label text-xl sm:text-2xl text-gray-300">Hours</div>
            </div>
            <div class="text-center">
              <div class="countdown-number text-6xl sm:text-8xl lg:text-9xl font-bold text-white mb-4 ${shouldAnimate.minutes ? 'flip' : ''}" data-value="${timeRemaining.minutes}">${timeRemaining.minutes}</div>
              <div class="countdown-label text-xl sm:text-2xl text-gray-300">Minutes</div>
            </div>
            <div class="text-center">
              <div class="countdown-number text-6xl sm:text-8xl lg:text-9xl font-bold text-white mb-4 ${shouldAnimate.seconds ? 'flip' : ''}" data-value="${timeRemaining.seconds}">${timeRemaining.seconds}</div>
              <div class="countdown-label text-xl sm:text-2xl text-gray-300">Seconds</div>
            </div>
          </div>
        `;
        
        // Store current values for next comparison
        fullscreenCountdown.dataset.prevValues = JSON.stringify(currentValues);
        
        // Remove animation classes after animation completes
        setTimeout(() => {
          document.querySelectorAll('#fullscreen-countdown .countdown-number.flip').forEach(el => {
            el.classList.remove('flip');
          });
        }, 300);
      }
    }

    function switchSession(index) {
      currentSessionIndex = index;
      const currentSession = exam.sessions[index];
      
      // Update session info
      document.getElementById('current-session-name').textContent = currentSession.session;
      document.getElementById('current-session-date').textContent = new Date(currentSession.date).toLocaleDateString('en-IN', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        weekday: 'long'
      });
      
      // Update toggle buttons
      document.querySelectorAll('.session-toggle').forEach((btn, i) => {
        if (i === index) {
          btn.className = 'session-toggle px-3 sm:px-4 py-2 text-xs sm:text-sm font-medium rounded-md transition-colors bg-white text-zinc-900 shadow-sm';
        } else {
          btn.className = 'session-toggle px-3 sm:px-4 py-2 text-xs sm:text-sm font-medium rounded-md transition-colors text-zinc-600 hover:text-zinc-900';
        }
      });
      
      // Update countdowns immediately
      updateCountdown();
      updateFullscreenCountdown();
      
      // Update PiP countdown if active
      if (document.pictureInPictureElement) {
        // If PiP is currently active, restart it with the new session
        startPiPCountdown(exam, currentSession);
      }
    }

    function enterFullscreen() {
      const modal = document.getElementById('fullscreen-modal');
      const currentSession = exam.sessions[currentSessionIndex];
      
      document.getElementById('fullscreen-session-info').textContent = 
        `${currentSession.session} - ${new Date(currentSession.date).toLocaleDateString('en-IN', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric',
          weekday: 'long'
        })}`;
      
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      
      updateFullscreenCountdown();
      fullscreenInterval = setInterval(updateFullscreenCountdown, 1000);
    }

    function closeFullscreen() {
      const modal = document.getElementById('fullscreen-modal');
      modal.classList.add('hidden');
      document.body.style.overflow = 'auto';
      
      if (fullscreenInterval) {
        clearInterval(fullscreenInterval);
        fullscreenInterval = null;
      }
    }

    function shareExam() {
      if (navigator.share) {
        navigator.share({
          title: `${exam.name} 2026 Countdown`,
          text: `Track the countdown to ${exam.fullName} exam`,
          url: window.location.href
        });
      } else {
        // Fallback to copying URL
        navigator.clipboard.writeText(window.location.href).then(() => {
          alert('Link copied to clipboard!');
        });
      }
    }

    function togglePiPWidget() {
      const currentSession = exam.sessions[currentSessionIndex];
      
      // Start Picture-in-Picture countdown directly
      startPiPCountdown(exam, currentSession);
    }

    // Make functions global
    window.switchSession = switchSession;
    window.enterFullscreen = enterFullscreen;
    window.closeFullscreen = closeFullscreen;
    window.shareExam = shareExam;
    window.togglePiPWidget = togglePiPWidget;

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !document.getElementById('fullscreen-modal').classList.contains('hidden')) {
        closeFullscreen();
      } else if (e.key === 'f' || e.key === 'F') {
        const modal = document.getElementById('fullscreen-modal');
        if (modal.classList.contains('hidden')) {
          enterFullscreen();
        } else {
          closeFullscreen();
        }
      }
    });

    // Initialize countdowns
    document.addEventListener('DOMContentLoaded', () => {
      updateCountdown();
      updateFullscreenCountdown();
      countdownInterval = setInterval(updateCountdown, 1000);
    });

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (countdownInterval) clearInterval(countdownInterval);
      if (fullscreenInterval) clearInterval(fullscreenInterval);
    });
  </script>
</Layout>


